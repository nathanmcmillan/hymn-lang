use "util"

# last_index returns the index of the last instance of v in a, or -1 if not found.
func last_index(a, v) {
  let size = len(a)
  let i = size - 1
  while i >= 0 {
    if a[i] == v {
      return i
    }
    i = i - 1
  }
  return -1
}

# upper returns s with letters mapped to their upper case.
func upper(s) {
  let new = ""
  let size = len(s)
  for i = 0, i < size {
    let c = s[i]
    if c == 'a' { c = 'A' }
    elif c == 'b' { c = 'B' }
    elif c == 'f' { c = 'F' }
    elif c == 'o' { c = 'O' }
    new = new + c
  }
  return new
}

# abs returns the absolute value of n.
func abs(n) {
  if n < 0 { return -n }
  return n
}

# min returns the smaller value of a or b.
func min(a, b) {
  if a < b { return a }
  return b
}

# max returns the larger value of a or b.
func max(a, b) {
  if a > b { return a }
  return b
}

# string_comparator returns the alphabetical integer difference comparing a to b.
func string_comparator(a, b) {
  let to = min(len(a), len(b))
  for i = 0, i < to {
    let char = int(a[i]) - int(b[i])
    if char != 0 { return char }
  }
  return len(a) - len(b)
}

# sort returns a new array with elements sorted using the comparator function.
func sort(a, comparator) {
  let n = []
  let total = 0
  for v in a {
    let id = 0
    while true {
      if id == total { break }
      if comparator(v, n[id]) < 0 {
        for swap = total, swap > id, swap = swap - 1 {
          n[swap] = n[swap - 1]
        }
        break
      }
      id = id + 1
    }
    n[id] = v
    total = total + 1
  }
  return n
}

# sort_strings returns a new array with sorted strings.
func sort_strings(a) {
  return sort(a, string_comparator)
}
