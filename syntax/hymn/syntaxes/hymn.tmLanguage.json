{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Hymn",
  "scopeName": "source.hymn",
  "patterns": [
    {
      "match": "#.*$",
      "name": "comment.line.double-slash.hymn"
    },
    {
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.hymn"
        }
      },
      "end": "'",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.hymn"
        }
      },
      "name": "string.quoted.single.hymn",
      "patterns": [
        {
          "include": "#escaped"
        }
      ]
    },
    {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.hymn"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.hymn"
        }
      },
      "name": "string.quoted.double.hymn",
      "patterns": [
        {
          "include": "#escaped"
        }
      ]
    },
    {
      "begin": "\\b(func)\\s*(?:\\s+([a-zA-Z_][a-zA-Z0-9_-]*)\\s*)?(\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.hymn"
        },
        "2": {
          "name": "entity.name.function.hymn"
        },
        "3": {
          "name": "punctuation.definition.parameters.begin.hymn"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.end.hymn"
        }
      },
      "name": "meta.function.hymn",
      "patterns": [
        {
          "match": "[a-zA-Z_][a-zA-Z0-9_-]*",
          "name": "variable.parameter.hymn"
        },
        {
          "match": ",",
          "name": "punctuation.separator.arguments.hymn"
        }
      ]
    },
    {
      "match": "\\b(set)\\b",
      "captures": {
        "1": {
          "name": "storage.modifier.hymn"
        }
      }
    },
    {
      "match": "\\b(use)\\b",
      "captures": {
        "1": {
          "name": "keyword.import.hymn"
        }
      }
    },
    {
      "match": "\\b(if|elif|else|for|while|return|break|continue|and|or|not|in|try|except|throw|func)\\b",
      "captures": {
        "1": {
          "name": "keyword.control.hymn"
        }
      }
    },
    {
      "match": "\\b(copy|clear|delete|float|index|int|insert|keys|pop|echo|print|push|int|str|exists|len|type|_source|_format|_opcodes|_stack|_reference)(?:\\s|\\(|$)",
      "captures": {
        "1": {
          "name": "support.function.hymn"
        }
      }
    },
    {
      "match": "\\b(true|false|none)\\b",
      "captures": {
        "1": {
          "name": "constant.language.hymn"
        }
      }
    },
    {
      "match": "([a-zA-Z_][a-zA-Z0-9_-]*) *(?=\\()",
      "captures": {
        "1": {
          "name": "entity.name.function.hymn"
        }
      }
    },
    {
      "match": "\\b([a-zA-Z_][a-zA-Z0-9_-]*(?:\\.[a-zA-Z][a-zA-Z0-9-]*)*)\\b",
      "captures": {
        "1": {
          "name": "variable.hymn"
        }
      }
    },
    {
      "match": "\\b([0-9]+(?:\\.[0-9]+)?(?:(?:e|E)(?:\\+|-)?\\d+)?)\\b",
      "captures": {
        "1": {
          "name": "constant.numeric.decimal.hymn"
        }
      }
    },
    {
      "match": "\\b(0b[01]+)\\b",
      "captures": {
        "1": {
          "name": "constant.numeric.decimal.hymn"
        }
      }
    },
    {
      "match": "\\b(0x[0-9a-f]+)\\b",
      "captures": {
        "1": {
          "name": "constant.numeric.decimal.hymn"
        }
      }
    },
    {
      "match": "(?<= |\\b)(\\+|-|\\*|\\/|%|&|\\||\\^|~|<<|>>|->|=)(?= |\\b)",
      "captures": {
        "1": {
          "name": "keyword.operator.hymn"
        }
      }
    },
    {
      "match": "(?<= |\\b)(>=|<=|!=|<|>|==)(?= |\\b)",
      "captures": {
        "1": {
          "name": "keyword.operator.comparison.hymn"
        }
      }
    }
  ],
  "repository": {
    "escaped": {
      "patterns": [
        {
          "match": "\\\\[$abfnrtvz\\\\\"'\\n]",
          "name": "constant.character.escape.hymn"
        },
        {
          "match": "\\\\\\d{1,3}",
          "name": "constant.character.escape.byte.hymn"
        },
        {
          "match": "\\\\x[0-9A-Fa-f][0-9A-Fa-f]",
          "name": "constant.character.escape.byte.hymn"
        },
        {
          "match": "\\\\u\\{[0-9A-Fa-f]+\\}",
          "name": "constant.character.escape.unicode.hymn"
        },
        {
          "match": "\\\\.",
          "name": "invalid.illegal.character.escape.hymn"
        }
      ]
    }
  }
}
